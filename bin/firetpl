#!/usr/bin/env node
/*global XQCore:true */
var fs = require('fs'),
	path = require('path');

var mkdirp = require('mkdirp'),
	program = require('commander');

var FireTPL = require('../firetpl');

program.version('0.0.1')
	.usage('[options] <file ...>')
	.option('-o, --out <outfile>', 'Write precompiled file to <outfile>. If this option is not present write to STDOUT')
	.option('-a, --amd', 'Precompile as an AMD module.')
	.option('-c, --commonjs', 'Precompile as CommonJS module.')
	.option('-f, --firetpl-module <name>', 'Set the name of FireTPL module for AMD and CommonJS ( var FireTPL = require(\'myFireTPLModule\'))')
	.option('-m, --module-name <name>', 'Set the name of the AMD module ( define(\'myname\', [\'firetpl\'] ... ); )')
	.option('-s, --no-scope', 'Don\'t wrap a scope function. (Ignored if the AMD or CommonJS option is set)')
	.option('-n, --name <name>', 'Set the template name. If this option isn\'t set, the name will be extracted from the tempalte filename')
	.option('-d, --debug', 'Enable debug mode')
	.option('-p, --pretty', 'Prettify output')
	.option('-s, --scopeTags', 'Insert scope tags')
	.option('-f, --file', 'Read from file')
	.option('-v, --verbose', 'Output more infos')
	.parse(process.argv);

// console.log('Args', program.args);
var src = program.args[0],
	source = fs.readFileSync(src, 'utf8'),
	tplName = program.name || path.basename(src, path.extname(src));

//Set debug mode
FireTPL.debug = !!program.debug;

if (program.verbose) {
	console.log('Precompile ', program.args);
	console.log('---------- begin of source file ----------');
	console.log(source);
	console.log('---------- end of source file ----------');
	console.log('size: ', source.length, 'chars');
	console.log('');
	console.log('');
}

var precompiled = FireTPL.precompile(source, {
	name: tplName,
	moduleName: program.moduleName,
	firetplModule: program.firetplModule,
	amd: program.amd,
	commonjs: program.commonjs,
	scope: program.scope,
	verbose: program.verbose
});

var beforeOut = function(str) {
	if (!program.pretty) {
		return str;
	}

	var indention = 0,
		out = '';

	var repeat = function(str, i) {
		var out = '';
		while (i > 0) {
			out += str;
			i--;
		}
		return out;
	};

	for (var i = 0; i < str.length; i++) {
		var c = str.charAt(i);
		
		if(c === '}' && str.charAt(i - 1) !== '{') {
			indention--;
			out += '\n' + repeat('\t', indention);
		}

		out += c;

		if (c === '{' && str.charAt(i + 1) !== '}') {
			indention++;
			out += '\n' + repeat('\t', indention);
		}
		else if(c === ';') {
			out += '\n' + repeat('\t', indention);
		}
	}

	return out;
};

if (program.out) {
	console.log('Write to', program.out);
	var dir = path.dirname(program.out);
	if (dir) {
		mkdirp.sync(dir);
	}
	fs.writeFileSync(program.out, beforeOut(precompiled));
} else {
	console.log(beforeOut(precompiled));
}